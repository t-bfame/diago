// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: idl/proto/aggregator.proto

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorClient interface {
	Coordinate(ctx context.Context, opts ...grpc.CallOption) (Aggregator_CoordinateClient, error)
}

type aggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorClient(cc grpc.ClientConnInterface) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) Coordinate(ctx context.Context, opts ...grpc.CallOption) (Aggregator_CoordinateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Aggregator_ServiceDesc.Streams[0], "/Aggregator/Coordinate", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggregatorCoordinateClient{stream}
	return x, nil
}

type Aggregator_CoordinateClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type aggregatorCoordinateClient struct {
	grpc.ClientStream
}

func (x *aggregatorCoordinateClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aggregatorCoordinateClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AggregatorServer is the server API for Aggregator service.
// All implementations must embed UnimplementedAggregatorServer
// for forward compatibility
type AggregatorServer interface {
	Coordinate(Aggregator_CoordinateServer) error
	mustEmbedUnimplementedAggregatorServer()
}

// UnimplementedAggregatorServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorServer struct {
}

func (UnimplementedAggregatorServer) Coordinate(Aggregator_CoordinateServer) error {
	return status.Errorf(codes.Unimplemented, "method Coordinate not implemented")
}
func (UnimplementedAggregatorServer) mustEmbedUnimplementedAggregatorServer() {}

// UnsafeAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServer will
// result in compilation errors.
type UnsafeAggregatorServer interface {
	mustEmbedUnimplementedAggregatorServer()
}

func RegisterAggregatorServer(s grpc.ServiceRegistrar, srv AggregatorServer) {
	s.RegisterService(&Aggregator_ServiceDesc, srv)
}

func _Aggregator_Coordinate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AggregatorServer).Coordinate(&aggregatorCoordinateServer{stream})
}

type Aggregator_CoordinateServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type aggregatorCoordinateServer struct {
	grpc.ServerStream
}

func (x *aggregatorCoordinateServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aggregatorCoordinateServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Aggregator_ServiceDesc is the grpc.ServiceDesc for Aggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Coordinate",
			Handler:       _Aggregator_Coordinate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "idl/proto/aggregator.proto",
}
